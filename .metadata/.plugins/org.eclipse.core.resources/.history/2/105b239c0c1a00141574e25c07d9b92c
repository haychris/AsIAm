package com.example.asiam;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.example.asiam.util.SystemUiHider;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.Toast;
import android.support.v4.app.NavUtils;

/**
 * An example full-screen activity that shows and hides the system UI (i.e.
 * status bar and navigation/system bar) with user interaction.
 * 
 * @see SystemUiHider
 */
@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
public class FullscreenPicture extends Activity {
	/**
	 * Whether or not the system UI should be auto-hidden after
	 * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
	 */
	private static final boolean AUTO_HIDE = false;

	/**
	 * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
	 * user interaction before hiding the system UI.
	 */
	private static final int AUTO_HIDE_DELAY_MILLIS = 3000;

	/**
	 * If set, will toggle the system UI visibility upon interaction. Otherwise,
	 * will show the system UI visibility upon interaction.
	 */
	private static final boolean TOGGLE_ON_CLICK = true;

	/**
	 * The flags to pass to {@link SystemUiHider#getInstance}.
	 */
	private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;

	protected static final int MEDIA_TYPE_IMAGE = 1;

	/**
	 * The instance of the {@link SystemUiHider} for this activity.
	 */
	private SystemUiHider mSystemUiHider;
	
	private Camera front;
	private Camera back;
    private CameraPreview mPreview;
    private CameraPreview2 mPreview2;
    private String TAG = "FullscreenPicture";
    private Context bigPicture;
    private boolean active;

	@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		bigPicture = this;
		active = true;
		
		setContentView(R.layout.activity_fullscreen_picture);
		setupActionBar();
		getActionBar().hide();

		final View controlsView = findViewById(R.id.fullscreen_content_controls);
		
		//doPhotoThreadStuff();
		doPhotoStuff();
		
		//final View contentView = findViewById(R.id.fullscreen_content);
		final View contentView = findViewById(R.id.camera_preview);

		// Set up an instance of SystemUiHider to control the system UI for
		// this activity.
		mSystemUiHider = SystemUiHider.getInstance(this, contentView,
				HIDER_FLAGS);
		mSystemUiHider.setup();
		mSystemUiHider
				.setOnVisibilityChangeListener(new SystemUiHider.OnVisibilityChangeListener() {
					// Cached values.
					int mControlsHeight;
					int mShortAnimTime;

					@Override
					@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
					public void onVisibilityChange(boolean visible) {
						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
							// If the ViewPropertyAnimator API is available
							// (Honeycomb MR2 and later), use it to animate the
							// in-layout UI controls at the bottom of the
							// screen.
							if (mControlsHeight == 0) {
								mControlsHeight = controlsView.getHeight();
							}
							if (mShortAnimTime == 0) {
								mShortAnimTime = getResources().getInteger(
										android.R.integer.config_shortAnimTime);
							}
							controlsView
									.animate()
									.translationY(visible ? 0 : mControlsHeight)
									.setDuration(mShortAnimTime);
						} else {
							// If the ViewPropertyAnimator APIs aren't
							// available, simply show or hide the in-layout UI
							// controls.
							controlsView.setVisibility(visible ? View.VISIBLE
									: View.GONE);
						}

						if (visible && AUTO_HIDE) {
							// Schedule a hide().
							delayedHide(AUTO_HIDE_DELAY_MILLIS);
						}
					}
				});

		// Set up the user interaction to manually show or hide the system UI.
		contentView.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				if (TOGGLE_ON_CLICK) {
					mSystemUiHider.toggle();
				} else {
					mSystemUiHider.show();
				}
			}
		});

		// Upon interacting with UI controls, delay any scheduled hide()
		// operations to prevent the jarring behavior of controls going away
		// while interacting with the UI.
		findViewById(R.id.dummy_button).setOnTouchListener(
				//mDelayHideTouchListener);
				abortAction);
		
		
		
		
	}
//	@Override
//	protected void onResume(){
//		front.reconnect();
//	}
	private void doPhotoThreadStuff(){
		if (checkCameraHardware(this)){
			Thread preview_thread = new Thread(new Runnable() {
				@Override
	            public void run() {
	            	front = getCameraInstance(1);
	            	while (front == null && active){
	            		front = getCameraInstance(1);
	            		SystemClock.sleep(100);
	            	}
	            	while (!active)SystemClock.sleep(1000);
	    			Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
	    			Camera.getCameraInfo(1, cameraInfo);
	    			front.enableShutterSound(!cameraInfo.canDisableShutterSound);
	    			
	    			Looper.prepare(); //allows handlers
	    			// Create our Preview view and set it as the content of our activity.
	    	        mPreview = new CameraPreview(bigPicture, front);
	    	        final FrameLayout preview = (FrameLayout) findViewById(R.id.camera_preview);
	    	        //allows modification to UI thread
	    	        preview.post(new Runnable() {
	                    public void run() {
	                    	preview.addView(mPreview);
	                    }
	                });


	            }
	        }, "preview_thread");
	        preview_thread.start();

//	        
	        Thread preview_thread2 = new Thread(new Runnable() {
	            @Override
	            public void run() {
	            	back = getCameraInstance(0);
	            	while (back == null && active) {
	            		back = getCameraInstance(0);
	            		SystemClock.sleep(100);
	            	}
	    			Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
	    			Camera.getCameraInfo(0, cameraInfo);
	    			back.enableShutterSound(!cameraInfo.canDisableShutterSound);
	    			
	    	
	    			Looper.prepare();
	    			// Create our Preview view and set it as the content of our activity.
	    	        mPreview2 = new CameraPreview2(bigPicture, back);
	    	        final FrameLayout preview2 = (FrameLayout) findViewById(R.id.camera_preview2);
	    	        preview2.post(new Runnable() {
	                    public void run() {
	                    	preview2.addView(mPreview2);
	                    }
	                });


	            }
	        }, "preview_thread2");
	        preview_thread2.start();

	        
//			
	        
	     // Add a listener to the Capture button
	        Button captureButton = (Button) findViewById(R.id.button_capture);
	        captureButton.setOnClickListener(
	            new View.OnClickListener() {
	                @Override
	                public void onClick(View v) {
	                	if (front != null) {
		                    // get an image from the camera
		                    front.takePicture(null, null, mPicture);
		                    front.stopPreview();
		                    front.release();
		                    front = null;
		                    doPhotoStuff();
	                	}
	                	if (back != null) {
	                		back.takePicture(null, null, mPicture);
	                		back.stopPreview();
	                		back.release();
	                		back = null;
	                	}
	                    
	                }
	            }
	        );
		}
	}
	private void doPhotoStuff(){
		if (checkCameraHardware(this)){
			front = getCameraInstance(1);
			Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
			Camera.getCameraInfo(1, cameraInfo);
			front.enableShutterSound(!cameraInfo.canDisableShutterSound);
	
			// Create our Preview view and set it as the content of our activity.
		    mPreview = new CameraPreview(this, front);
		    FrameLayout preview = (FrameLayout) findViewById(R.id.camera_preview);
		    preview.addView(mPreview);
		    
		    
//		    
//			if (Camera.getNumberOfCameras() > 1){
//				back = getCameraInstance(0);
//				Camera.CameraInfo cameraInfo2 = new Camera.CameraInfo();
//				Camera.getCameraInfo(0, cameraInfo2);
//				back.enableShutterSound(!cameraInfo2.canDisableShutterSound);
//			}
//		    
//			// Create our Preview view and set it as the content of our activity.
//		    mPreview2 = new CameraPreview2(this, back);
//		    FrameLayout preview2 = (FrameLayout) findViewById(R.id.camera_preview2);
//		    preview2.addView(mPreview);
			
		    
			Button captureButton = (Button) findViewById(R.id.button_capture);
	        captureButton.setOnClickListener(
	            new View.OnClickListener() {
	                @Override
	                public void onClick(View v) {
	                	if (front != null) {
		                    // get an image from the camera
		                    front.takePicture(null, null, mPicture);
		                    
		                    //doPhotoStuff();
	                	}
	                	if (back != null) {
	                		back.takePicture(null, null, mPicture);
	                		back.stopPreview();
	                		back.release();
	                		back = null;
	                	}
	                    
	                }
	            }
	        );
		}
	}
	
	private PictureCallback mPicture = new PictureCallback() {

	    @Override
	    public void onPictureTaken(byte[] data, Camera camera) {
	    	
	        File pictureFile = getOutputMediaFile(MEDIA_TYPE_IMAGE, bigPicture);
	        if (pictureFile == null){
	            Log.d(TAG, "Error creating media file, check storage permissions: "// +
	                //e.getMessage());
	            		);
	            return;
	        }

	        try {
	            FileOutputStream fos = new FileOutputStream(pictureFile);
	            fos.write(data);
	            fos.close();
	        } catch (FileNotFoundException e) {
	            Log.d(TAG, "File not found: " + e.getMessage());
	        } catch (IOException e) {
	            Log.d(TAG, "Error accessing file: " + e.getMessage());
	        }
	        camera.stopPreview();
            camera.release();
            camera = null;
	    }
	};

	public static final int MEDIA_TYPE_VIDEO = 2;

	/** Create a file Uri for saving an image or video */
	private static Uri getOutputMediaFileUri(int type, Context context){
	      return Uri.fromFile(getOutputMediaFile(type, context));
	}

	/** Create a File for saving an image or video */
	private static File getOutputMediaFile(int type, Context context){
	    // To be safe, you should check that the SDCard is mounted
	    // using Environment.getExternalStorageState() before doing this.

		File mediaStorageDir = context.getDir("com.example.asiam", 0);
//	    File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
//	              Environment.DIRECTORY_PICTURES), "com.example.asiam");
	    
	    // This location works best if you want the created images to be shared
	    // between applications and persist after your app has been uninstalled.

	    // Create the storage directory if it does not exist
	    if (! mediaStorageDir.exists()){
	        if (! mediaStorageDir.mkdirs()){
	            Log.d("com.example.asiam", "failed to create directory");
	            return null;
	        }
	    }

	    // Create a media file name
	    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
	    File mediaFile;
	    if (type == MEDIA_TYPE_IMAGE){
	        mediaFile = new File(mediaStorageDir.getPath() + File.separator +
	        "IMG_"+ timeStamp + ".jpg");
	    } else if(type == MEDIA_TYPE_VIDEO) {
	        mediaFile = new File(mediaStorageDir.getPath() + File.separator +
	        "VID_"+ timeStamp + ".mp4");
	    } else {
	        return null;
	    }
	    return mediaFile;
	}
	 

	/** Check if this device has a camera */
	private boolean checkCameraHardware(Context context) {
	    if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)){
	        // this device has a camera
	        return true;
	    } else {
	        // no camera on this device
	        return false;
	    }
	}
	
	/** A safe way to get an instance of the Camera object. */
	public static Camera getCameraInstance(int side){
	    Camera c = null;
	    try {
	        c = Camera.open(side); // attempt to get a Camera instance
	    }
	    catch (Exception e){
	        // Camera is not available (in use or does not exist)
	    }
	    return c; // returns null if camera is unavailable
	}
	
	
//	protected void onResume() {
//		super.onResume();
//		active = true;
//		if (back == null && front == null)
//			doPhotoStuff();
//	}
	@Override
    protected void onPause() {
        super.onPause();
        releaseCamera(front);              // release the camera immediately on pause event
        releaseCamera(back);
        active = false;
        finish();
	}
	protected void onDestroy(){
		super.onDestroy();
		active = false;
		releaseCamera(front);
		releaseCamera(back);
	}
	private void releaseCamera(Camera camera){
        if (camera != null){
            camera.release();        // release the camera for other applications
            camera = null;
        }
    }


	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);

		// Trigger the initial hide() shortly after the activity has been
		// created, to briefly hint to the user that UI controls
		// are available.
		
		
		//delayedHide(1000);
	}

	/**
	 * Set up the {@link android.app.ActionBar}, if the API is available.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	private void setupActionBar() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			// Show the Up button in the action bar.
			getActionBar().setDisplayHomeAsUpEnabled(true);
		}
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == android.R.id.home) {
			// This ID represents the Home or Up button. In the case of this
			// activity, the Up button is shown. Use NavUtils to allow users
			// to navigate up one level in the application structure. For
			// more details, see the Navigation pattern on Android Design:
			//
			// http://developer.android.com/design/patterns/navigation.html#up-vs-back
			//
			// TODO: If Settings has multiple levels, Up should navigate up
			// that hierarchy.
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	/**
	 * Touch listener to use for in-layout UI controls to delay hiding the
	 * system UI. This is to prevent the jarring behavior of controls going away
	 * while interacting with activity UI.
	 */
	View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
		@Override
		public boolean onTouch(View view, MotionEvent motionEvent) {
			if (AUTO_HIDE) {
				delayedHide(AUTO_HIDE_DELAY_MILLIS);
			}
			return false;
		}
	};
	View.OnTouchListener abortAction = new View.OnTouchListener() {
		@Override
		public boolean onTouch(View view, MotionEvent motionEvent) {
			finish();
			return false;
		}
	};

	Handler mHideHandler = new Handler();
	Runnable mHideRunnable = new Runnable() {
		@Override
		public void run() {
			//mSystemUiHider.hide();
		}
	};

	/**
	 * Schedules a call to hide() in [delay] milliseconds, canceling any
	 * previously scheduled calls.
	 */
	private void delayedHide(int delayMillis) {
		mHideHandler.removeCallbacks(mHideRunnable);
		mHideHandler.postDelayed(mHideRunnable, delayMillis);
	}
}
